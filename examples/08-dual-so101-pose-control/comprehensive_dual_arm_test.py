#!/usr/bin/env python3
"""
ü§ñ Comprehensive Dual Arm Test for PhosphoBot Example 8
=====================================================

This script demonstrates all working dual-arm capabilities with two SO-101 robots.
Designed for automated testing and demonstration.
"""

import time
import sys
from dual_so101_controller import DualSO101Controller


def main():
    print("üöÄ COMPREHENSIVE DUAL ARM TEST")
    print("=" * 50)
    print("ü§ñ Testing with TWO SO-101 robots connected")
    print()
    
    # Initialize controller
    try:
        controller = DualSO101Controller()
        print("‚úÖ Controller initialized successfully")
        
        # Initialize robot connection
        print("üîß Initializing robot connection...")
        controller.initialize_robot()
        print("‚úÖ Robot connection established")
        
    except Exception as e:
        print(f"‚ùå Initialization failed: {e}")
        return False
    
    print()
    print("üìä TEST SEQUENCE STARTING...")
    print("-" * 30)
    
    # Test 1: Individual arm control
    print("\nüß™ TEST 1: Individual Arm Control")
    print("Moving left arm (ID=0) to position...")
    try:
        controller.move_arm_absolute_pose(
            robot_id=0,
            position=[0.25, 0.15, 0.20],  # Left side
            orientation=[0, 0, 0]
        )
        print("‚úÖ Left arm positioned successfully")
        
        print("Moving right arm (ID=1) to position...")
        controller.move_arm_absolute_pose(
            robot_id=1,
            position=[0.25, -0.15, 0.20],  # Right side
            orientation=[0, 0, 0]
        )
        print("‚úÖ Right arm positioned successfully")
        
    except Exception as e:
        print(f"‚ùå Individual arm control failed: {e}")
        return False
    
    time.sleep(1)
    
    # Test 2: Gripper control
    print("\nüß™ TEST 2: Gripper Control")
    try:
        print("Opening both grippers...")
        controller.control_gripper(robot_id=0, gripper_value=1.0)
        controller.control_gripper(robot_id=1, gripper_value=1.0)
        print("‚úÖ Both grippers opened")
        
        time.sleep(0.5)
        
        print("Closing both grippers...")
        controller.control_gripper(robot_id=0, gripper_value=0.0)
        controller.control_gripper(robot_id=1, gripper_value=0.0)
        print("‚úÖ Both grippers closed")
        
    except Exception as e:
        print(f"‚ùå Gripper control failed: {e}")
        return False
    
    time.sleep(1)
    
    # Test 3: Relative movements
    print("\nüß™ TEST 3: Relative Movement")
    try:
        print("Moving both arms down by 5cm...")
        controller.move_arm_relative_pose(robot_id=0, delta_position=[0, 0, -5])
        controller.move_arm_relative_pose(robot_id=1, delta_position=[0, 0, -5])
        print("‚úÖ Both arms moved down")
        
        time.sleep(0.5)
        
        print("Moving both arms back up...")
        controller.move_arm_relative_pose(robot_id=0, delta_position=[0, 0, 5])
        controller.move_arm_relative_pose(robot_id=1, delta_position=[0, 0, 5])
        print("‚úÖ Both arms moved back up")
        
    except Exception as e:
        print(f"‚ùå Relative movement failed: {e}")
        return False
    
    time.sleep(1)
    
    # Test 4: Coordinated movement
    print("\nüß™ TEST 4: Coordinated Movement")
    try:
        print("Moving arms closer together...")
        controller.move_arm_absolute_pose(
            robot_id=0,
            position=[0.25, 0.08, 0.18],  # Closer to center
            orientation=[0, 0, 0]
        )
        controller.move_arm_absolute_pose(
            robot_id=1,
            position=[0.25, -0.08, 0.18],  # Closer to center
            orientation=[0, 0, 0]
        )
        print("‚úÖ Arms moved closer together")
        
        time.sleep(0.5)
        
        print("Moving arms back to original positions...")
        controller.move_arm_absolute_pose(
            robot_id=0,
            position=[0.25, 0.15, 0.20],
            orientation=[0, 0, 0]
        )
        controller.move_arm_absolute_pose(
            robot_id=1,
            position=[0.25, -0.15, 0.20],
            orientation=[0, 0, 0]
        )
        print("‚úÖ Arms returned to original positions")
        
    except Exception as e:
        print(f"‚ùå Coordinated movement failed: {e}")
        return False
    
    # Test 5: Error handling
    print("\nüß™ TEST 5: Error Handling")
    try:
        print("Testing invalid robot ID...")
        try:
            controller.move_arm_absolute_pose(
                robot_id=99,  # Invalid ID
                position=[0.25, 0.0, 0.20],
                orientation=[0, 0, 0]
            )
            print("‚ö†Ô∏è Expected error not caught")
        except Exception as expected_error:
            print(f"‚úÖ Error properly handled: Invalid robot ID")
        
    except Exception as e:
        print(f"‚ùå Error handling test failed: {e}")
    
    # Cleanup
    print("\nüßπ CLEANUP")
    try:
        print("Moving arms to safe positions...")
        controller.move_arm_absolute_pose(
            robot_id=0,
            position=[0.25, 0.15, 0.25],  # Safe height
            orientation=[0, 0, 0]
        )
        controller.move_arm_absolute_pose(
            robot_id=1,
            position=[0.25, -0.15, 0.25],  # Safe height
            orientation=[0, 0, 0]
        )
        
        print("Opening grippers...")
        controller.control_gripper(robot_id=0, gripper_value=1.0)
        controller.control_gripper(robot_id=1, gripper_value=1.0)
        
        print("‚úÖ Cleanup completed")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Cleanup warning: {e}")
    
    print()
    print("üéâ ALL TESTS COMPLETED SUCCESSFULLY!")
    print("=" * 50)
    print("ü§ñ Both SO-101 robots are fully functional")
    print("‚úÖ Individual control: WORKING")
    print("‚úÖ Gripper control: WORKING") 
    print("‚úÖ Relative movements: WORKING")
    print("‚úÖ Coordinated movements: WORKING")
    print("‚úÖ Error handling: WORKING")
    print()
    print("üí° Ready for advanced applications:")
    print("   ‚Ä¢ Vision-guided dual-arm manipulation")
    print("   ‚Ä¢ Collaborative pick-and-place operations")
    print("   ‚Ä¢ Synchronized assembly tasks")
    print("   ‚Ä¢ Interactive dual-arm control")
    
    return True


if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrupted by user")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
